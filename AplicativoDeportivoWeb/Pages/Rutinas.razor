@*Este es un componente de Blazor que muestra una lista de ejercicios para un grupo muscular espec√≠fico. Aqu√≠ est√° la explicaci√≥n de cada parte:

@page "/ejer/{muscleName}": Esta l√≠nea define la ruta para este componente. {muscleName} es un par√°metro de ruta que se pasar√° al componente.

@using AplicativoDeportivoWeb.Repository.Postgres y @using Microsoft.EntityFrameworkCore: Estas l√≠neas importan los espacios de nombres necesarios para interactuar con la base de datos.

@inject DataContext DbContext: Esta l√≠nea inyecta una instancia de DataContext (que es probablemente tu contexto de Entity Framework) en el componente.

<h1>Ejercicios para @MuscleName</h1>: Esta l√≠nea muestra un t√≠tulo que incluye el nombre del grupo muscular.

El bloque <ul> genera una lista de ejercicios. Si exercises es null, no se genera nada. Si exercises no es null, se genera un elemento de lista <li> para cada ejercicio.

El bloque @code contiene la l√≥gica del componente:

[Parameter] public string MuscleName { get; set; }: Esta l√≠nea define una propiedad que Blazor llenar√° con el valor del par√°metro de ruta {muscleName}.
private List<Exercises> exercises;: Esta l√≠nea define una variable para almacenar la lista de ejercicios.
protected override async Task OnInitializedAsync(): Este m√©todo se llama cuando se inicializa el componente. En este m√©todo, se carga la lista de ejercicios de la base de datos que corresponden al grupo muscular especificado por MuscleName.*@

@page "/rutinas"
@using AplicativoDeportivoWeb.Repository.Postgres
@using Microsoft.EntityFrameworkCore
@inject DataContext DbContext
@inject NavigationManager NavigationManager
<style>
    body {
        background-image: url('/images/fitness-pattern-seamless-background-with-blue-line-fitness-icons-on-white-vector.jpg');
        background-repeat: repeat;
        background-size: auto;
    }
    .index-page {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .btn-hover-effect:hover {
        transform: scale(1.02);
        transition: transform 0.3s;
    }
    .btn-custom {
        width: calc(80% - 80px);
        margin: auto;
    }
    .full-width {
        width: 100%;
        margin: 0;
        padding: 0;
    }
    .content {
        margin-top: 15px; /* Adjust top margin */
        margin-left: 15px; /* Adjust left margin */
    }
    h1.my-4 {
        /* This adds a shadow to the text. */
        text-shadow: 0px 0px 15px rgb(121, 189, 189);
</style>

<div class="index-page">
    <div class="container text-center full-width content">
        <h1 class="my-4"> üèãÔ∏è‚Äç‚ôÇÔ∏èEntrenamientos por Grupo MuscularüèÉ</h1>

        <div class="row">
            @if (muscleGroups != null)
            {
                int counter = 0;
                foreach (var muscleGroup in muscleGroups)
                {
                    <div class="col-md-6">
                        <button class="btn btn-primary m-2 w-100 btn-hover-effect btn-custom" @onclick="() => NavigateToExercises(muscleGroup.Name)">
                            @TranslateMuscleName(muscleGroup.Name)
                        </button>                    
                        </div>
                    if (++counter % 2 == 0)
                    {
                        @:</div><div class="row">
                    }
                }
            }

        </div>
        <footer class="my-5 pt-5 text-muted text-center text-small">
        <p class="mb-1">&copy; 2023-2024 Ram√≥n M R / TEG IUPSM </p>
        
      </footer>
    </div>
</div>

@code {
    private List<Muscle> muscleGroups;

    protected override async Task OnInitializedAsync()
    {
        muscleGroups = await DbContext.Muscle.ToListAsync();
    }

    private string TranslateMuscleName(string muscleName)
    {
        var translations = new Dictionary<string, string>
        {
            { "Chest", "Pecho" },
            { "Biceps", "B√≠ceps" },
            { "Triceps", "Tr√≠ceps" },
            { "Back", "Espalda" },
            { "Core", "Abdomen" },
            { "Legs", "Piernas" },
            { "Shoulders", "Hombros" }
        };

        return translations.TryGetValue(muscleName, out var translatedName) ? translatedName : muscleName;
    }
    private void NavigateToExercises(string muscleName)
    {
        NavigationManager.NavigateTo($"/ejer/{muscleName}");
    }
}